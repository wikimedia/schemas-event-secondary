{
  "title": "analytics/legacy/helppanel",
  "description": "Logs interactions with the help panel or the post-edit panel displayed to new editors by the GrowthExperiments extension",
  "$id": "/analytics/legacy/helppanel/1.2.0",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "examples": [
    {
      "event": {
        "action": "impression",
        "user_id": 123456,
        "user_editcount": 123456,
        "context": "editing",
        "editor_interface": "visualeditor",
        "is_mobile": false,
        "page_id": 123456,
        "page_title": "example_page_title",
        "page_ns": 0,
        "user_can_edit": true,
        "session_token": "338abe4c324c68675fb2",
        "help_panel_session_id": "338abe4c324c68675fb2"
      },
      "meta": {
        "dt": "2020-04-02T19:11:20.942Z",
        "id": "b0caf18d-6c7f-4403-947d-2712bbe28610",
        "stream": "eventlogging_HelpPanel"
      },
      "dt": "2020-04-02T19:11:20.942Z",
      "client_dt": "2020-04-02T19:11:20.942Z",
      "$schema": "/analytics/legacy/helppanel/1.2.0",
      "schema": "HelpPanel"
    }
  ],
  "required": [
    "$schema",
    "event",
    "meta"
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "description": "A URI identifying the JSONSchema for this event. This should match an schema's $id in a schema repository. E.g. /schema/title/1.0.0\n",
      "type": "string"
    },
    "client_dt": {
      "description": "ISO-8601 formatted timestamp of when the event occurred/was generated in UTC). This exists separately from meta.dt in the main common schema. For external client-sent instrumentation events, we want to allow meta.dt to be the received time (filled in by EventGate at ingest time), as we don't trust client-sent events to always set the proper date and time. Client-set event generation time should be set here instead. See: https://phabricator.wikimedia.org/T240460\n",
      "type": "string",
      "format": "date-time",
      "maxLength": 128
    },
    "dt": {
      "description": "UTC ISO-8601 timestamp of event.  Deprecated, use meta.dt.",
      "type": "string",
      "format": "date-time",
      "maxLength": 128
    },
    "http": {
      "type": "object",
      "properties": {
        "has_cookies": {
          "description": "True if the http request has any cookies set",
          "type": "boolean"
        },
        "method": {
          "description": "The HTTP request method (GET, POST, etc.)",
          "type": "string"
        },
        "protocol": {
          "description": "The protocol used for the request (HTTP or HTTPS)",
          "type": "string"
        },
        "request_headers": {
          "description": "Request headers sent by the client.  E.g. user-agent, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "response_headers": {
          "description": "Response headers sent back to the client (when known).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status_code": {
          "description": "The HTTP status code returned for this request (when known)",
          "type": "integer",
          "maximum": 9007199254740991,
          "minimum": -9007199254740991
        },
        "client_ip": {
          "description": "The http client's IP address, usually set from the X-Client-IP header, the value of which is extracted from X-Forwarded-For.",
          "type": "string"
        }
      }
    },
    "ip": {
      "description": "Client IP address that sent this event, usually best guess parsed out of from X-Client-IP header which is set by varnish from X-Forwarded-For. Deprecated, use http.client_ip.\n",
      "type": "string"
    },
    "meta": {
      "type": "object",
      "required": [
        "dt",
        "stream"
      ],
      "properties": {
        "domain": {
          "description": "Domain the event or entity pertains to",
          "type": "string",
          "minLength": 1
        },
        "dt": {
          "description": "UTC event datetime, in ISO-8601 format",
          "type": "string",
          "format": "date-time",
          "maxLength": 128
        },
        "id": {
          "description": "Unique ID of this event",
          "type": "string"
        },
        "request_id": {
          "description": "Unique ID of the request that caused the event",
          "type": "string"
        },
        "stream": {
          "description": "Name of the stream/queue/dataset that this event belongs in",
          "type": "string",
          "minLength": 1
        },
        "uri": {
          "description": "Unique URI identifying the event or entity",
          "type": "string",
          "format": "uri-reference",
          "maxLength": 8192
        }
      }
    },
    "recvFrom": {
      "description": "Hostname of server emitting the log line.  Deprecated.",
      "type": "string"
    },
    "revision": {
      "description": "Revision ID of event schema.  Deprecated.",
      "type": "integer",
      "maximum": 9007199254740991,
      "minimum": -9007199254740991
    },
    "schema": {
      "description": "Title of event schema.  Deprecated.",
      "type": "string"
    },
    "seqId": {
      "description": "Udp2log sequence ID.  Deprecated.",
      "type": "integer",
      "maximum": 9007199254740991,
      "minimum": -9007199254740991
    },
    "topic": {
      "description": "The queue topic name this event belongs in.  Deprecated.",
      "type": "string"
    },
    "uuid": {
      "description": "Unique event identifier.  Deprecated, use meta.id.",
      "type": "string",
      "maxLength": 128
    },
    "webHost": {
      "description": "Request host. 'window.location.hostname' on client-side events; $_SERVER['HTTP_HOST'] on server.",
      "type": "string"
    },
    "wiki": {
      "description": "$wgDBName e.g. enwiki",
      "type": "string"
    },
    "event": {
      "type": "object",
      "required": [
        "action",
        "user_id",
        "user_editcount",
        "context",
        "editor_interface",
        "is_mobile",
        "page_id",
        "page_title",
        "page_ns",
        "user_can_edit",
        "session_token",
        "help_panel_session_id"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "impression",
            "open",
            "close",
            "ask-help",
            "general-help",
            "suggested-edits",
            "back-home",
            "back-general-help",
            "link-click",
            "enter-question-text",
            "submit-attempt",
            "submit-success",
            "submit-failure",
            "cog-open",
            "cog-close",
            "search",
            "search-focus",
            "guidance-tab-click",
            "peek-impression",
            "peek-tap",
            "peek-dismiss",
            "postedit-impression",
            "postedit-close",
            "postedit-link-click",
            "postedit-task-click",
            "postedit-task-refresh",
            "postedit-toast-message-impression",
            "postedit-expand",
            "postedit-collapse",
            "postedit-task-navigation"
          ],
          "description": "Action the user took:\n\n- impression: Help button is shown to user\n\n- open: User opens panel\n\n- close: User closes panel\n\n- ask-help: User advances from the home panel to the ask-help panel (formerly called the question review panel)\n\n- general-help: User advances from the home panel to the general-help panel\n\n- suggested-edits: User advances from the home panel to the suggested-edits panel, which contains suggestion-specific guidance content\n\n- back-home: User goes back from the ask-question panel, general help panel, or suggested edits panel to the home panel\n\n- back-general-help: User goes back from the search panel to the general help panel\n\n- link-click: User clicks a link in the panel\n\n- enter-question-text: User enters text into the question field\n\n- submit-attempt: User clicks the button to submit their question\n\n- submit-success: Question is successfully submitted\n\n- submit-failure: Question submission fails\n\n- cog-open: User opens the cog menu\n\n- cog-close: User closes the cog menu\n\n- search: User searches help content\n\n- search-focus: User focuses the search input\n\n- guidance-tab-click: User clicks on one of the tipset tabs in the suggested edits panel.\n\n- peek-impression: User sees the mobile peek (used on article pages during the suggested edit workflow).\n\n- peek-tap: User taps on the mobile peek to open the help panel.\n\n -peek-dismiss: User dismisses the mobile peek.\n\n- postedit-impression: postedit panel is shown to the user\n\n- postedit-close: postedit panel is closed by the user\n\n- postedit-link-click: one of the postedit panel buttons is clicked by the user\n\n- postedit-task-click: the task card in the postedit panel is clicked by the user\n- postedit-task-refresh: the refresh button in the postedit panel is clicked by the user\n- postedit-toast-message-impression: the toast message is shown to the user (before the postedit panel is shown)\n- postedit-expand: the user expands the postedit dialog\n- postedit-collapse: the user collases the postedit dialog\n- postedit-task-navigation: the user navigates through the task feed in the postedit dialog"
        },
        "action_data": {
          "description": "Additional data for certain actions:\n\nFor action=impression and action=peek-impression:\n- taskType: type of the suggested edit task (only when the user is in the suggested edit workflow).\n\nFor action=link-click: symbolic name of the link being clicked. This could be:\n- suggested-edits-faq: The link to the suggested edits feature FAQ on mediawiki.org\n- help-desk: The link to the help desk on the ask-question panel\n- view-more: The 'view more help articles' link on the general help panel\n- view-question: The 'view your question' link in the question complete panel\n- special-change-email: The link or button pointing to Special:ChangeEmail in the question complete panel\n- special-confirm-email: The link or button pointing to Special:ConfirmEmail in the question complete panel\n- special-preferences: The 'disable this tool in preferences link' in the settings dropdown\n- more-about-this-feature: The 'more about this feature' link in the settings dropdown\n- search-result-N (where N is an integer): The Nth search result in the search mode of the general help panel; N starts at 1\n- guidance-TASKTYPE-tipset-N: a link in the contents of the N-th tab =1-based) of the guidance for the given task type.\n- One of the IDs configured in $wgGEHelpPanelLinks, for the configurable links shown on the general help panel\n\nFor action=submit-attempt: an object consisting of the following fields:\n- question_length: character count of the question\n- include_title: whether the option to include the title was used\n- had_email: whether the user had an email address set when before posting the question\n- had_email_confirmed: whether that address was confirmed\n\nFor action=submit-success: an object consisting of the following fields:\n- revision_id: revision ID of the edit adding the question\n\nFor action=guidance-tab-click and action=guidance-tab-advance:\n- taskType: task type ID\n- tabName: tab name\n\nFor action=postedit-impression:\n- type: 'full' when the panel is shown with a task card, 'small' when the panel is intentionally shown without a task, 'error' when the task is omitted due to some error.\n- newcomerTaskToken: (type=full only) a token that can be used to connect this to a NewcomerTaskImpression event.\n- error: (type=error only) error message\n- savedTaskType: type of the suggested edit task that has just been saved\n- userTaskTypes:(type=full only)  the user's task type (difficulty) filter settings (array of strings)\n- userTopics: (type=full only) the user's topic filter settings (array of strings, omitted when not filtering for topics)\n\nFor action=postedit-task-click:\n- newcomerTaskToken: a token that can be used to connect this to a NewcomerTaskImpression event.\n\nFor action=postedit-link-click: symbolic name of the link being clicked. This could be:\n- homepage: return to homepage button\n- edit: edit again button\n- suggested-edits: return to suggested edits feed\nFor action=postedit-task-navigation:\n- dir: next or prev\n- navigation_type: swipe or click",
          "type": "string"
        },
        "user_id": {
          "description": "The user id.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "user_editcount": {
          "description": "The total number of edits of the user.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "context": {
          "type": "string",
          "enum": [
            "editing",
            "reading",
            "postedit",
            "homepage_help",
            "homepage_mentorship"
          ],
          "description": "The context in which the panel appears: during editing, during viewing a page, as a notice after saving, or on the homepage."
        },
        "editor_interface": {
          "type": "string",
          "enum": [
            "visualeditor",
            "wikitext-2017",
            "wikitext",
            "machineSuggestions",
            "other"
          ],
          "description": "The type of editor used by the user. For context=editing, this is the editor being used right now. For context=postedit, it is the editor that was used for saving the page. For context=reading, it is the best guess what editor the user is going to use."
        },
        "is_suggested_task": {
          "description": "Whether the page being viewed is a suggested task. (This roughly means that the user navigated there via the suggested edits interface.) Omitted on the homepage.",
          "type": "boolean"
        },
        "is_mobile": {
          "description": "Whether the mobile site is being used.",
          "type": "boolean"
        },
        "page_id": {
          "description": "ID of the page the user is attempting to edit.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "page_title": {
          "description": "Full title of the page the user is attempting to edit, including namespace (wgPageName format). This is needed to log edit activity on redlinks, as pageId is not available.",
          "type": "string"
        },
        "page_ns": {
          "description": "Namespace ID of the page the user is attempting to edit.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "user_can_edit": {
          "description": "Whether the user is allowed to edit the page. This will be false if e.g. the page is protected or the user is blocked.",
          "type": "boolean"
        },
        "page_protection": {
          "description": "For protected pages, the permission level required to create, edit, or move the page. Unset for unprotected pages.",
          "type": "string"
        },
        "session_token": {
          "description": "Session token that survives across pages (mw.user.sessionId()), but not browser restarts, used in deterministic user bucketing. This will only be set for client-side (JavaScript-generated) events, for server-side events the value will be an empty string.",
          "type": "string"
        },
        "help_panel_session_id": {
          "description": "One-time token per page load. This is like page_token and has the same behavior, but it isn't obtained through getPageViewToken(), so its value is different.",
          "type": "string"
        }
      }
    }
  }
}
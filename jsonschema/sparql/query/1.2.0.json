{
  "title": "sparql/query",
  "description": "A sparql query received on the triplet store backends (e.g. query.wikidata.org)\n",
  "$id": "/sparql/query/1.2.0",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "additionalProperties": false,
  "examples": [
    {
      "$schema": "/sparql/query/1.2.0",
      "meta": {
        "stream": "sparql_query_example",
        "dt": "2020-07-01T00:00:00Z"
      },
      "http": {
        "method": "GET",
        "has_cookies": false,
        "status_code": 200
      },
      "backend_host": "wdqs-example1001",
      "namespace": "wdq",
      "query": "example_query",
      "format": "json",
      "system_runtime_metrics": {
        "running_queries_before": 3,
        "running_queries_after": 2,
        "cpu_load_average": 0.84
      },
      "performer": {
        "user_text": "example_event_user"
      }
    }
  ],
  "required": [
    "$schema",
    "backend_host",
    "http",
    "meta",
    "namespace",
    "query"
  ],
  "properties": {
    "$schema": {
      "type": "string",
      "description": "A URI identifying the JSONSchema for this event. This should match an schema's $id in a schema repository. E.g. /schema/title/1.0.0\n"
    },
    "meta": {
      "type": "object",
      "required": [
        "dt",
        "stream"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "maxLength": 8192,
          "description": "Unique URI identifying the event or entity"
        },
        "request_id": {
          "type": "string",
          "description": "Unique ID of the request that caused the event"
        },
        "id": {
          "type": "string",
          "description": "Unique ID of this event"
        },
        "dt": {
          "type": "string",
          "format": "date-time",
          "maxLength": 128,
          "description": "UTC event datetime, in ISO-8601 format"
        },
        "domain": {
          "type": "string",
          "description": "Domain the event or entity pertains to",
          "minLength": 1
        },
        "stream": {
          "type": "string",
          "description": "Name of the stream/queue/dataset that this event belongs in",
          "minLength": 1
        }
      }
    },
    "http": {
      "type": "object",
      "description": "Information about the HTTP request that generated an event.",
      "properties": {
        "method": {
          "type": "string",
          "description": "The HTTP request method (GET, POST, etc.)"
        },
        "client_ip": {
          "type": "string",
          "description": "The HTTP client's IP address"
        },
        "request_headers": {
          "type": "object",
          "description": "Request headers sent by the client.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "response_headers": {
          "type": "object",
          "description": "Response headers sent back to the client (when known).",
          "additionalProperties": {
            "type": "string"
          }
        },
        "has_cookies": {
          "type": "boolean",
          "description": "True if the HTTP request has any cookies set"
        },
        "status_code": {
          "type": "integer",
          "description": "The HTTP status code returned for this request (when known)",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        }
      }
    },
    "backend_host": {
      "type": "string",
      "description": "Hostname of sparql endpoint (blazegraph) server handling this sparql query"
    },
    "namespace": {
      "type": "string",
      "description": "Name of the database being requested\n"
    },
    "query": {
      "type": "string",
      "description": "sparql query received"
    },
    "query_time": {
      "type": "integer",
      "description": "query time",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "format": {
      "type": "string",
      "description": "the format requested (overrides the Accept header if set)"
    },
    "params": {
      "type": "object",
      "description": "Request parameters. Usually from the HTTP query string or in the request body if the POST method is used. Note that the query and format params are not duplicated in this property.\n",
      "additionalProperties": {
        "type": "string"
      }
    },
    "system_runtime_metrics": {
      "description": "Runtime metrics of the service running the query.",
      "type": "object",
      "required": [
        "running_queries_before",
        "running_queries_after",
        "cpu_load_average"
      ],
      "properties": {
        "running_queries_before": {
          "type": "integer",
          "description": "Number of concurrent queries running before this one.",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "running_queries_after": {
          "type": "integer",
          "description": "Number of concurrent queries running after this one.",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "cpu_load_average": {
          "type": "number",
          "description": "Average CPU load (defined as an 1 minute average of number of processes queued for execution and running), measured right after the query.\n",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        }
      }
    },
    "performer": {
      "description": "Represents the user that performed this query.",
      "type": "object",
      "required": [
        "user_text"
      ],
      "properties": {
        "user_text": {
          "description": "The text representation of the user that performed this query.",
          "type": "string",
          "minLength": 1
        }
      }
    }
  }
}